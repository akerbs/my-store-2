import React, { useState, useContext } from "react"
import { graphql, StaticQuery } from "gatsby"
import CssBaseline from "@material-ui/core/CssBaseline"
import { makeStyles } from "@material-ui/core/styles"
import SEO from "../../components/seo"
import Header from "../../components/header"
import Footer from "../../components/footer"
import Container from "@material-ui/core/Container"
import Grid from "@material-ui/core/Grid"
import withWidth from "@material-ui/core/withWidth"
import Hidden from "@material-ui/core/Hidden"
import PropTypes from "prop-types"
import { useShoppingCart, formatCurrencyString } from "use-shopping-cart"
import Button from "@material-ui/core/Button"
import { DrawerCartContext } from "../../context/DrawerCartContext"
import { CurrencyContext } from "../../components/layout"
import Counter from "../../components/Cart/Counter"

const useStyles = makeStyles(theme => ({
  funnyBunny: {},
}))

export default function (props) {
  const classes = useStyles()
  const { addItem } = useShoppingCart()
  const { handleDrawerCartOpen } = useContext(DrawerCartContext)
  const { actCurrency } = useContext(CurrencyContext)

  // const ItemInfoEur = {
  //   sku: props.data.funnyBunnyPriceEur.id,
  //   id: props.data.funnyBunnyPriceEur.product.id,
  //   name: props.data.funnyBunnyPriceEur.product.name,
  //   price: props.data.funnyBunnyPriceEur.unit_amount,

  //   currency: props.data.funnyBunnyPriceEur.currency,
  //   image: props.data.funnyBunnyPriceEur.product.images,
  //   description: props.data.funnyBunnyPriceEur.product.description,
  // }

  console.log("DATA:", props.data)

  return ( <StaticQuery
    query={graphql`
      query {
        prices: allStripePrice(filter: {product: {name: {eq: "Magic Hat"}}}) {
          edges {
            node {
              id
              currency
              unit_amount
              product {
                name
                description
              }
            }
          }
        }
    `}
    render={({ prices }) => (
      <div className={classes.allItemsViewWrapper}>
        {prices.edges.map(({ node: price }) => {
          const item = {
            priceId: price.id,
            price: price.unit_amount,
            currency: price.currency,
            // image: price.product.images,
            productId: price.product.id,
            name: price.product.name,
            description: price.product.description,

          }
          return <ItemCard key={price.id} item={item} />
        })}
      </div>
    )}
  />


 
      // <div id="funnyBunny" className="funnyBunny">
      /* {actCurrency === "EUR" ? ItemInfoEur.name : null} */
      /* <div id="catClock" className="catClock">
        {props.data.catClockPriceEur.id}
      </div>
      <div id="magicHat" className="magicHat">
        {props.data.magicHatPriceEur.id}
      </div> */

  )
}



return ( <StaticQuery
  query={graphql`
    query {
      funnyBunnyPriceUsd: stripePrice(
        id: { eq: "price_1HNFcEHwITO0GSJr0BcSMXko" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }
      funnyBunnyPriceEur: stripePrice(
        id: { eq: "price_1HGjcwHwITO0GSJrJEhUG0Aq" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }
      funnyBunnyPriceRub: stripePrice(
        id: { eq: "price_1HNFbdHwITO0GSJr0cQgGhYQ" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }
      catClockPriceUsd: stripePrice(
        id: { eq: "price_1HNFdPHwITO0GSJrVsLO5IdU" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }
      catClockPriceEur: stripePrice(
        id: { eq: "price_1HH7DcHwITO0GSJrZz3vg6d9" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }
      catClockPriceRub: stripePrice(
        id: { eq: "price_1HNFdwHwITO0GSJrpygU4AcI" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }
      magicHatPriceUsd: stripePrice(
        id: { eq: "price_1HMt2gHwITO0GSJrR1YuszFV" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }
      magicHatPriceEur: stripePrice(
        id: { eq: "price_1HHUu9HwITO0GSJrsoWoL51O" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }
      magicHatPriceRub: stripePrice(
        id: { eq: "price_1HNFZ7HwITO0GSJrieVKbbte" }
      ) {
        id
        currency
        unit_amount
        product {
          name
          id
          description
          images
        }
      }

      allStripePrice(filter: {product: {name: {eq: "Magic Hat"}}}) {
        edges {
          node {
            id
            currency
            unit_amount
            product {
              name
              description
              id
            }
          }
        }
      }